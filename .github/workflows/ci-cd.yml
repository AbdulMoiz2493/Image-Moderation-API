name: CI Pipeline for Image Moderation API

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run Black (code formatting check)
        run: black --check .

      - name: Run isort (import sorting check)
        run: isort --check-only --diff .

      - name: Run Flake8 (linting)
        run: flake8 . --max-line-length=88 --extend-ignore=E203

  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy

      - name: Run mypy (type checking)
        run: mypy . --strict

  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run tests with coverage
        env:
          MONGODB_URI: mongodb://localhost:27017/image_moderation
        run: |
          pytest --cov=./ --cov-report=xml tests/

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  build-docker:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (backend)
        run: |
          docker build -t image-moderation-api:latest -f Dockerfile .

      - name: Build Docker image (frontend)
        run: |
          docker build -t image-moderation-frontend:latest -f frontend/Dockerfile frontend/

      - name: Run Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 10 # Wait for containers to start
          docker-compose -f docker-compose.yml down

  deploy:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (backend)
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/image-moderation-api:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/image-moderation-api:latest

      - name: Build and push Docker image (frontend)
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/image-moderation-frontend:latest -f frontend/Dockerfile frontend/
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/image-moderation-frontend:latest